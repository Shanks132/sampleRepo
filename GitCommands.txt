1) to check the status of git repository 
$ git status

2) to make your directory a git repository
$ git init

3) to make all of the files and folders in git repository ready for next commit (Or we can say putting them in staging area)

$ git add --a

4)To commit (Or we can say taking snapshot of your staged files)

$ git commit -m "<message>"

5)To see recent commits on git repository

$ git log

6)To stage particular files in your git for next commit

$ git add <file name>

7) ls (list): present all the content present in the folder.
8) pwd (Present Working Directory): Used to show your present working directory.
9) cd (Change Directory): Used to change Directory and folder.
10) git clone : Used to clone Repository. Ex. git clone <URL of your Repo. in the form of HTTP>

PS: If you want to change the name of your cloned repository from shell? then type "git clone <URL of your Repo. in the form of HTTP> <your file name>"
11)rm -rf .git (rm=REMOVE): Used to delete your current git repository. [Deadly Command, think before used]

12)To ignore some files to track in git repository
 i) -> Create text file named ".gitignore" using command (if not exist): touch .gitignore
 ii)-> Add the name of the file to be ignore in .gitignore file

13)To ignore every file based on extension
 ii) -> Write *.<extension> in the .gitignore file
	example : if we want to ignore all files having .log extension
	open .gitignore file and add " *.log " in that file.  

14)To ignore folder inside git repository
 ii) -> Write <foldername>/ in the .gitignore file
	example : if we want to ignore all folder named "dir" inside git repository
	open .gitignore  file and add " dir/ " in that file.

15)To ignore outer folder inside git repository
 ii) -> Write /<foldername>/ in the .gitignore file
	example : if we want to ignore outer folder named "dir" inside git repository
	open .gitignore  file and add " /dir/ " in that file.

16)To compare same named files present in both staging area and working area 
 $ git diff

17)To add modified file in staging area again
 $ git add .

18)to compare same named files present in staging area and last commit
 $ git diff --staged

19)To direct commit tracked files (without staging)
$ git commit -a -m "commit message"

20)To Rename file
$ git mv <present-name> <new-name>

21)To Delete file
$ git rm <file-name>

22)To make the file untracked from tracked
$ git rm --cached <filename>

23)git log -p

24)git log -p -n (n is the last n commits)
shows details of last n commits only 

25)git log --stat
displays what has been done in previous commit in brief

26)git log --pretty=oneline
shows commit details in one line

27)$ git log --since=2.days
show commit done in last 2 days (can be weeks,months,years as well)

28)$ git log --pretty=format:"%H -- %ce"  //check out git-scm pretty format for more info 
show log with only required details such as author names or emails or log numbers etc etc 

29)git commit --amend 
to change previous commit

30)in vim editor press i to insert message 
To quit : press escape and type on the bottom bar ':wq' to quit the editor

39)To do modifications in previous commit message
$ git commit --amend

40)To make file unstaged from staged
$ git restore --staged <filename>

41)To make File restore/unmodify to previous commit
$ git checkout -- <filename>

42)To make all File restore/unmodify to previous commit
$ git checkout -f

43)git checkout -b branchName
creates branch with given branch name

44)git checkout master 
changes back to master branch

45)To merge branch , switch to parent branch:
$ git merge <branch name to be merge>

*note :  VS CODE gives option to select and resolve merge conflicts *

